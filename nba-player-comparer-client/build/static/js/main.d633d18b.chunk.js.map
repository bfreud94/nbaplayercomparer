{"version":3,"sources":["components/datatable/datatable.js","actions/playerActions.js","actions/types.js","components/comparetable/compareTable.js","components/header/header.js","reducers/playerReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Datatable","this","props","addedPlayers","length","getPlayers","map","player","name","addPlayer","removePlayer","selectRow","mode","selected","getAddedPlayersNames","onSelect","row","isSelect","rowIndex","e","includes","onSelectAll","data","players","bordered","striped","condensed","options","noDataText","pagination","dataField","isKey","dataSort","Component","connect","state","dispatch","fetch","then","res","json","type","payload","playerData","CompareTable","header","className","style","linkStyle","to","color","fontSize","textDecoration","initialState","combineReducers","action","Array","isArray","filter","currentRow","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","render","Fragment","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d633d18b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table.min.css';\r\nimport { connect } from 'react-redux';\r\nimport { getPlayers, addPlayer, removePlayer } from '../../actions/playerActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Datatable extends Component {\r\n\r\n  componentDidMount()  {\r\n    if(this.props.addedPlayers.length === 0) {\r\n      this.props.getPlayers();\r\n    }\r\n  }\r\n\r\n  getAddedPlayersNames()  {\r\n    return this.props.addedPlayers.map((player) => player.name);\r\n  }\r\n\r\n  render()  {\r\n    const { addPlayer, addedPlayers, removePlayer} = this.props;\r\n    const selectRow = {\r\n      mode: 'checkbox',\r\n      selected: this.getAddedPlayersNames(),\r\n      onSelect: (row, isSelect, rowIndex, e) => {\r\n        addedPlayers.map((player) => player.name).includes(row.name) ? removePlayer(row) : addPlayer(row);\r\n      },\r\n      onSelectAll: (row, isSelect, e) => {\r\n        addedPlayers.length > 0 ? removePlayer(addedPlayers) : addPlayer(addedPlayers);\r\n      }\r\n    };\r\n    return (\r\n        <BootstrapTable \r\n          data={this.props.players}\r\n          bordered={false} striped condensed\r\n          // eslint-disable-next-line\r\n          options={ this.options, { noDataText: 'Loading...' } }\r\n          selectRow={selectRow}\r\n          pagination>\r\n          <TableHeaderColumn dataField=\"name\" isKey={ true } dataSort>Name</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"ppg\" dataSort>PPG</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"rpg\" dataSort>RPG</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"apg\" dataSort>APG</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"spg\" dataSort>SPG</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"bpg\" dataSort>BPG</TableHeaderColumn>\r\n        </BootstrapTable>\r\n    );\r\n  }\r\n}\r\n\r\nDatatable.propTypes = {\r\n  getPlayers: PropTypes.func.isRequired,\r\n  addPlayer: PropTypes.func.isRequired,\r\n  removePlayer: PropTypes.func.isRequired,\r\n  players: PropTypes.array.isRequired,\r\n  addedPlayers: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n   players: state.players.players,\r\n   addedPlayers: state.players.addedPlayers\r\n})\r\n\r\nexport default connect(mapStateToProps, { getPlayers, addPlayer, removePlayer })(Datatable);","import { GET_PLAYERS, ADD_PLAYER, REMOVE_PLAYER} from './types';\r\n\r\nexport const getPlayers = () => dispatch => {\r\n    fetch('/nbaPlayerComparer/api/getAllPlayers')\r\n        .then(res => res.json())\r\n        .then(players => dispatch({\r\n            type: GET_PLAYERS,\r\n            payload: players\r\n        })\r\n    );\r\n}\r\n\r\nexport const addPlayer = (playerData) => dispatch => {\r\n    dispatch({\r\n        type: ADD_PLAYER,\r\n        payload: playerData\r\n    });\r\n}\r\n\r\nexport const removePlayer = (playerData) => dispatch => {\r\n    dispatch({\r\n        type: REMOVE_PLAYER,\r\n        payload: playerData\r\n    });\r\n}","export const GET_PLAYERS = 'GET_PLAYERS';\r\nexport const ADD_PLAYER = 'ADD_PLAYER';\r\nexport const REMOVE_PLAYER = 'REMOVE_PLAYER';","import React, { Component } from 'react';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table.min.css';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass CompareTable extends Component {\r\n    render()  {\r\n        return (\r\n            <BootstrapTable \r\n                data={this.props.addedPlayers}\r\n                bordered={false} striped condensed\r\n                // eslint-disable-next-line\r\n                options={ this.options, { noDataText: 'Loading...' } }>\r\n                    <TableHeaderColumn dataField=\"name\" isKey={ true } dataSort>Name</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField=\"ppg\" dataSort>PPG</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField=\"rpg\" dataSort>RPG</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField=\"apg\" dataSort>APG</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField=\"spg\" dataSort>SPG</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField=\"bpg\" dataSort>BPG</TableHeaderColumn>\r\n            </BootstrapTable>\r\n        );\r\n    }\r\n}\r\n\r\nCompareTable.propTypes = {\r\n    addedPlayers: PropTypes.array.isRequired\r\n  }\r\n\r\nconst mapStateToProps = state => ({\r\n    addedPlayers: state.players.addedPlayers\r\n});\r\n  \r\nexport default connect(mapStateToProps, {})(CompareTable);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">NBA Player Comparer\r\n                <br/>\r\n                <Link style={linkStyle} to=\"/\">Show All Players | </Link>\r\n                <Link style={linkStyle} to=\"/comparePlayers\">Compare Players</Link>\r\n            </header>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#ffffff',\r\n    fontSize: '16px',\r\n    textDecoration: 'none',\r\n}\r\n\r\nexport default header;","import { GET_PLAYERS, ADD_PLAYER, REMOVE_PLAYER } from '../actions/types';\r\n\r\nconst initialState = {\r\n    players: [],\r\n    addedPlayers: []\r\n}\r\n\r\nexport default function(state = initialState, action)   {\r\n    switch(action.type) {\r\n        case GET_PLAYERS:\r\n            return  {\r\n                ...state,\r\n                players: action.payload\r\n            };\r\n        case ADD_PLAYER:\r\n            return  {\r\n                ...state,\r\n                addedPlayers: Array.isArray(action.payload) ? state.players : [...state.addedPlayers, action.payload]\r\n            };\r\n        case REMOVE_PLAYER:\r\n            return  {\r\n                ...state,\r\n                addedPlayers: Array.isArray(action.payload) ? [] : state.addedPlayers.filter(currentRow => currentRow !== action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport playerReducer from './playerReducer';\r\n\r\nexport default combineReducers({\r\n    players: playerReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\nimport Datatable from './components/datatable/datatable';\nimport CompareTable from './components/comparetable/compareTable';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './components/header/header';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends Component {\n  render()  {\n    return (\n      <Router>\n        <Provider store={store}>\n          <div className=\"App\">\n            <Header/>\n            <Route exact path=\"/\" render={props =>  (\n              <React.Fragment>\n                <div className=\"datatable\">\n                  <Datatable />\n                </div>\n              </React.Fragment>\n            )} />\n            <Route exact path=\"/comparePlayers\" render={props =>  (\n              <React.Fragment>\n                <div className=\"datatable\">\n                  <CompareTable />\n                </div>\n              </React.Fragment>\n            )} />\n          </div>\n        </Provider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}